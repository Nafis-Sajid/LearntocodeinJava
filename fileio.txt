Working with Files:
The java.io package includes a File class that allows you to work with files.
To start, create a File object and specify the path of the file in the constructor.

import java.io.File;
...
File file = new File("C:\\data\\input-file.txt");

With the exists() method, you can determine whether a file exists.
import java.io.File;

public class MyClass {
  public static void main(String[ ] args) {
    File x = new File("C:\\sololearn\\test.txt");
    if(x.exists()) {
     System.out.println(x.getName() +  "exists!");
    }
    else { 
     System.out.println("The file does not exist");
    }
  }
}

The code above prints a message stating whether or not the file exists at the specified path.

Reading a File:
Files are useful for storing and retrieving data, and there are a number of ways to read from a files.
One of the simplest ways is to use the Scanner class from the java.util package.
The constructor of the Scanner class can take a File object as input.
To read the contents of a text file at the path "C:\\sololearn\\test.txt", we would need to create a File object with the corresponding path and pass it to the Scanner object.

try {
  File x = new File("C:\\sololearn\\test.txt");
  Scanner sc = new Scanner(x);      
}
 catch (FileNotFoundException e) {

}

Reading a File:
The Scanner class inherits from the Iterator, so it behaves like one.
We can use the Scanner object's next() method to read the file's contents.
try {
  File x = new File("C:\\sololearn\\test.txt");
  Scanner sc = new Scanner(x);
  while(sc.hasNext()) {
    System.out.println(sc.next());
  }
  sc.close();
} catch (FileNotFoundException e) {
  System.out.println("Error");
}

The file's contents are output word by word, because the next() method returns each word separately.

Creating Files:
Formatter, another useful class in the java.util package, is used to create content and write it to files.
Example:

import java.util.Formatter;

public class MyClass {
   public static void main(String[ ] args) {
  try {
    Formatter f = new Formatter("C:\\sololearn\\test.txt");
  } catch (Exception e) {
      System.out.println("Error");
  }
  }
}

This creates an empty file at the specified path. If the file already exists, this will overwrite it.